{"version":3,"sources":["Todo/todoContext.js","Todo/TodoItem.js","Todo/TodoList.js","Todo/AddTodo.js","Loader.js","Modal/Modal.js","App.js","serviceWorker.js","index.js"],"names":["TodoContext","createContext","TodoItem","todo","index","todoItemToggle","todoItemRemove","useContext","className","style","completed","backgroundColor","type","checked","onChange","id","title","onClick","bind","styles","ul","margin","padding","TodoList","props","todos","map","item","key","AddTodo","addNewTodo","useState","inputState","setInputState","input","value","event","target","clearInput","useInputValue","onSubmit","preventDefault","trim","flexBasis","height","Loader","display","justifyContent","Modal","state","isOpen","this","setState","prevState","Fragment","onOpen","React","Component","App","todosState","setTodosState","loaderState","setLoaderState","useEffect","fetch","then","res","json","data","Provider","updatedTodos","filter","el","length","console","log","changedTodos","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c9cff995.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nconst TodoContext = createContext();\r\n\r\nexport default TodoContext;\r\n","import React, { useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport TodoContext from \"./todoContext\";\r\n// console.log(TodoContext);\r\n// console.log(React);\r\n\r\nfunction TodoItem({ todo, index, todoItemToggle }) {\r\n  const { todoItemRemove } = useContext(TodoContext);\r\n  // console.log(useContext(TodoContext));\r\n\r\n  const styles = {\r\n    li: {\r\n      backgroundColor: \"#eee\",\r\n    },\r\n  };\r\n\r\n  return (\r\n    <li className=\"todo-item\" style={todo.completed ? styles.li : null}>\r\n      <span>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={todo.completed}\r\n          className=\"todo-checkbox\"\r\n          onChange={() => {\r\n            todoItemToggle(todo.id);\r\n          }}\r\n        />\r\n        <strong>{index}</strong>\r\n        &nbsp;\r\n        <span className={todo.completed ? \"todo-done\" : null}>\r\n          {todo.title}\r\n        </span>\r\n      </span>\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn-remove\"\r\n        // onClick={() => todoItemRemove(todo.id)}//визов функції при клікові через колбек\r\n        onClick={todoItemRemove.bind(null, todo.id)} //привязка нульового контекста з необхідним аргументом до onClick!!\r\n      >\r\n        &times;\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\n\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n  index: PropTypes.number,\r\n};\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nconst styles = {\r\n  ul: {\r\n    margin: 0,\r\n    padding: 0,\r\n  },\r\n};\r\n\r\nfunction TodoList(props) {\r\n  return (\r\n    <ul style={styles.ul}>\r\n      {props.todos.map((item, index) => {\r\n        return (\r\n          <TodoItem\r\n            todo={item}\r\n            key={item.id}\r\n            index={index + 1}\r\n            todoItemToggle={props.todoItemToggle}\r\n          />\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nTodoList.propTypes = {\r\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n//кастомний хук для інпута\r\nfunction useInputValue(defaultVal = \"\") {\r\n  //Реакт хук зміни стейта\r\n  const [inputState, setInputState] = useState(\"\");\r\n\r\n  return {\r\n    input: {\r\n      value: inputState,\r\n      onChange: (event) => setInputState(event.target.value),\r\n    },\r\n    clearInput: () => setInputState(\"\"),\r\n  };\r\n}\r\n\r\n//компонент форми додавання нової задачі\r\nfunction AddTodo({ addNewTodo }) {\r\n  //деструктуризація кастомного хука\r\n  const { input, clearInput } = useInputValue(\"\");\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    if (input.value.trim()) {\r\n      addNewTodo(input.value); //підйом значення з інпута в App, для зміни стейта\r\n      clearInput(); //звернення до виклика стейт хука\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form className=\"form-add-new\" onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        style={{ flexBasis: \"80%\", height: \"1.5rem\" }}\r\n        {...input}\r\n      />\r\n      <button\r\n        type=\"submit\"\r\n        className=\"btn-add-new\"\r\n        style={{ flexBasis: \"15%\" }}\r\n      >\r\n        add new\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n//валідація пропсів\r\nAddTodo.propTypes = {\r\n  addNewTodo: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddTodo;\r\n","import React from \"react\";\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div style={{ display: \"flex\", justifyContent: \"center\", margin: \"3rem\" }}>\r\n      <div className=\"loader\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport \"./Modal.css\";\r\n\r\nclass Modal extends React.Component {\r\n  state = {\r\n    isOpen: false,\r\n  };\r\n\r\n  onOpen() {\r\n    this.setState((prevState) => {\r\n      return { isOpen: !prevState.isOpen };\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <button onClick={this.onOpen.bind(this)} className=\"btn-modal-open\">\r\n          open\r\n        </button>\r\n        {this.state.isOpen && (\r\n          <div className=\"modal\">\r\n            <div className=\"modal-body\">\r\n              <p className=\"modal-text\">I am a modal</p>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn-close-modal\"\r\n                onClick={() => this.setState({ isOpen: !this.state.isOpen })}\r\n              >\r\n                &times;\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","import React, { useState, useEffect } from \"react\";\nimport TodoContext from \"./Todo/todoContext\";\nimport TodoList from \"./Todo/TodoList\";\nimport AddTodo from \"./Todo/AddTodo\";\nimport Loader from \"../src/Loader\";\nimport Modal from \"./Modal/Modal\";\n\nfunction App() {\n  //статична інфа\n  // const todos = [\n  //   { id: 1, completed: false, title: \"buy food\" },\n  //   { id: 2, completed: true, title: \"get a ride\" },\n  //   { id: 3, completed: false, title: \"help home\" },\n  // ];\n  // const TodoListLazy = React.lazy(() => import(\"./Todo/TodoList\"));\n\n  const [todosState, setTodosState] = useState([]);\n  const [loaderState, setLoaderState] = useState(true);\n\n  function todoItemToggle(id) {\n    console.log(\"todo id\", id);\n    let changedTodos = todosState.map((el) => {\n      if (el.id === id) {\n        el.completed = !el.completed;\n      }\n      return el;\n    });\n\n    setTodosState(changedTodos);\n  }\n\n  function todoItemRemove(id) {\n    let updatedTodos = todosState.filter((el) => {\n      return el.id !== id;\n    });\n\n    setTodosState(updatedTodos);\n  }\n\n  function createNewTodo(title) {\n    const updatedTodos = [\n      ...todosState,\n      { id: todosState.length + 1, title, completed: false },\n    ];\n\n    setTodosState(updatedTodos);\n  }\n\n  function getTodos() {\n    fetch(\"https://jsonplaceholder.typicode.com/todos?_limit=5\")\n      .then((res) => res.json())\n      .then((data) => {\n        setTodosState(data);\n        setLoaderState(false);\n      });\n  }\n\n  useEffect(() => getTodos(), []);\n\n  return (\n    <TodoContext.Provider value={{ todoItemRemove }}>\n      <div className=\"container\">\n        <h1>Todo list</h1>\n        <AddTodo addNewTodo={createNewTodo} />\n        {/* <React.Suspense fallback={<Loader />}>\n          <TodoListLazy todos={todosState} todoItemToggle={todoItemToggle} />\n        </React.Suspense> */}\n        {loaderState && <Loader />}\n        {todosState.length ? (\n          <TodoList todos={todosState} todoItemToggle={todoItemToggle} />\n        ) : (\n          loaderState || <p>Todo list is empty</p>\n        )}\n        <Modal />\n      </div>\n    </TodoContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}